from typing import Any
from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from astra_web.generator.schemas.particles import Particles
from astra_web.host_localizer.schemas.dispatch import DispatchResponse
from astra_web.uuid import get_uuid
from astra_web.file import IniExportableModel, IniExportableArrayModel
from astra_web.status import DispatchStatus
from .output import SimulationOutputSpecification
from .run import SimulationRunSpecifications
from .scan import SimulationScanSpecifications
from .modules import Solenoid, Cavity
from .space_charge import SpaceCharge
from .emittance_table import (
    Transversal1DNormalizedEmittanceTable,
    LongitudinalNormalizedEmittanceTable,
    TraceSpaceEmittanceTable,
)
from .auto_phase import CavityAutoPhaseTable


class SimulationInput(IniExportableModel):

    _id: str

    # web exclusive fields:
    @property
    def id(self):
        return self._id

    comment: str | None = Field(
        default=None,
        description="Optional comment for the simulation.",
    )

    @property
    def run_dir(self) -> str:
        return self.id

    @property
    def field_file_names(self) -> set[str]:
        """
        Returns a set of all field file names used in the simulation.
        """
        return {c.field_file_name for c in self.cavities.values} | {
            s.field_file_name for s in self.solenoids.values
        }

    def excluded_ini_fields(self) -> set[str]:
        return {
            "id",
            "comment",
            "run_dir",
            "field_file_names",
            "run",
            "output",
            "scan",
            "cavities",
            "solenoids",
            "space_charge",
        }

    # ASTRA fields:
    run: SimulationRunSpecifications = Field(
        default=SimulationRunSpecifications(),
        description="Specifications of operative run parameters such as thread numbers, run directories and more.",
    )
    output: SimulationOutputSpecification = Field(
        default=SimulationOutputSpecification(),
        description="Specifications about the output files generated by the simulation.",
    )
    scan: SimulationScanSpecifications = Field(
        default=SimulationScanSpecifications(),
        description="Specifications for the parameters scans and optimizations.",
    )
    cavities: IniExportableArrayModel[Cavity] = Field(
        default_factory=IniExportableArrayModel[Cavity],
        description="Specifications of cavities existing in the simulation setup. If not specified differently, \
            cavities will be ordered w.r.t. to the z parameter values.",
    )
    solenoids: IniExportableArrayModel[Solenoid] = Field(
        default_factory=IniExportableArrayModel[Solenoid],
        description="Specifications of solenoids existing in the simulation setup. If not specified differently, \
            solenoids will be ordered w.r.t. to the z parameter values.",
    )
    space_charge: SpaceCharge = Field(default=SpaceCharge(), description="")

    def model_post_init(self, context: Any, /) -> None:
        self._id = get_uuid()

    def to_ini(self, indent: int = 4) -> str:
        run_str = self.run.to_ini(indent=indent)
        output_str = self.output.to_ini(indent=indent)
        scan_str = self.scan.to_ini(indent=indent)
        charge_str = self.space_charge.to_ini(indent=indent)
        has_cavities = str(len(self.cavities.values) > 0).lower()
        cavity_str = f"&CAVITY\n    LEfield = {has_cavities}\n{self.cavities.to_ini(indent=indent)}/"
        has_solenoids = str(len(self.solenoids.values) > 0).lower()
        solenoid_str = f"&SOLENOID\n    LBfield = {has_solenoids}\n{self.solenoids.to_ini(indent=indent)}/"

        return (
            "\n\n".join(
                [
                    run_str,
                    output_str,
                    scan_str,
                    charge_str,
                    cavity_str,
                    solenoid_str,
                ]
            )
            + "\n"
        )


class SimulationDispatchOutput(BaseModel):
    model_config = ConfigDict(extra="forbid")

    sim_id: str
    dispatch_response: DispatchResponse


class SimulationMetaData(BaseModel):
    status: DispatchStatus = Field(description="Current status of the simulation.")
    finished_date: datetime | None = Field(
        default=None,
        description="Time and date when ASTRA simulation finished as ISO 8601.",
    )
    execution_time: float | None = Field(
        default=None, description="Duration of the ASTRA simulation."
    )
    warnings: list[str] = Field(
        default_factory=list,
        description="List of warnings generated during the simulation.",
    )
    cavity_auto_phasing: CavityAutoPhaseTable | None = Field(
        default=None,
        description="Table of automatically determined cavity phases.",
    )


class SimulationOutput(BaseModel):
    model_config = ConfigDict(extra="forbid")

    particles: list[Particles] | None = Field(
        description="List of particle distributions at output positions."
    )
    final_particle_counts: dict[str, int] | None = Field(
        description="Number of particles - active, inactive, total."
    )
    norm_emittance_table_x: Transversal1DNormalizedEmittanceTable | None = Field(
        default=None
    )
    norm_emittance_table_y: Transversal1DNormalizedEmittanceTable | None = Field(
        default=None
    )
    norm_emittance_table_z: LongitudinalNormalizedEmittanceTable | None = Field(
        default=None
    )
    trace_space_emittance_table: TraceSpaceEmittanceTable | None = Field(default=None)


class SimulationDataWithMeta(BaseModel):
    model_config = ConfigDict(extra="forbid")

    input: SimulationInput | None = Field(
        description="Simulation input as provided by the user."
    )
    output: SimulationOutput | None = Field(
        description="Simulation output, if the simulation has finished successfully.",
    )
    input_astra: str | None = Field(
        default=None, description="Raw input file for ASTRA."
    )
    output_astra: str | None = Field(
        default=None, description="Raw output file from ASTRA."
    )
    meta: SimulationMetaData | None = Field(
        default=None, description="Meta information about the simulation run."
    )
