from typing import Any
from datetime import datetime
import numpy as np
from pydantic import BaseModel, ConfigDict, Field
from astra_web.generator.schemas.particles import Particles
from astra_web.host_localizer.schemas.dispatch import DispatchResponse
from astra_web.uuid import get_uuid
from astra_web.file import IniExportableModel
from astra_web.status import DispatchStatus
from .output import SimulationOutputSpecification
from .run import SimulationRunSpecifications
from .scan import SimulationScanSpecifications
from .modules import Solenoid, Cavity
from .space_charge import SpaceCharge
from .emittance_table import XYEmittanceTable, ZEmittanceTable


class SimulationInput(IniExportableModel):

    _id: str

    # web exclusive fields:
    @property
    def id(self):
        return self._id

    comment: str | None = Field(
        default=None,
        description="Optional comment for the simulation.",
    )

    @property
    def run_dir(self) -> str:
        return self.id

    @property
    def field_file_names(self) -> set[str]:
        """
        Returns a set of all field file names used in the simulation.
        """
        return {c.field_file_name for c in self.cavities} | {
            s.field_file_name for s in self.solenoids
        }

    def excluded_ini_fields(self) -> set[str]:
        return {"id", "comment", "run_dir", "field_file_names"}

    # ASTRA fields:
    run_specs: SimulationRunSpecifications = Field(
        default=SimulationRunSpecifications(),
        description="Specifications of operative run parameters such as thread numbers, run directories and more.",
    )
    output_specs: SimulationOutputSpecification = Field(
        default=SimulationOutputSpecification(),
        description="Specifications about the output files generated by the simulation.",
    )
    scan_specs: SimulationScanSpecifications = Field(
        default=SimulationScanSpecifications(),
        description="Specifications for the parameters scans and optimizations.",
    )
    cavities: list[Cavity] = Field(
        default=[],
        description="Specifications of cavities existing in the simulation setup. If not specified differently, \
            cavities will be ordered w.r.t. to the z_0 parameter values.",
    )
    solenoids: list[Solenoid] = Field(
        default=[],
        description="Specifications of solenoids existing in the simulation setup. If not specified differently, \
            solenoids will be ordered w.r.t. to the z_0 parameter values.",
    )
    space_charge: SpaceCharge = Field(default=SpaceCharge(), description="")

    def _sort_and_set_ids(self, attribute_key: str) -> None:
        attr = getattr(self, attribute_key)
        if not np.any(list(map(lambda o: o.z_0 is None, attr))):
            setattr(self, attribute_key, sorted(attr, key=lambda element: element.z_0))
        for idx, element in enumerate(getattr(self, attribute_key), start=1):
            element.id = idx

    def model_post_init(self, context: Any, /) -> None:
        self._id = get_uuid()
        self._sort_and_set_ids("cavities")
        self._sort_and_set_ids("solenoids")

    def to_ini(self) -> str:
        run_str = self.run_specs.to_ini()
        output_str = self.output_specs.to_ini()
        scan_str = f"&SCAN\n{self.scan_specs.to_ini()}/"
        charge_str = self.space_charge.to_ini()
        has_cavities = str(len(self.cavities) > 0).lower()
        cavity_str = f"&CAVITY\n    LEfield = {has_cavities}\n{''.join([c.to_ini() for c in self.cavities])}/"
        has_solenoids = str(len(self.solenoids) > 0).lower()
        solenoid_str = f"&SOLENOID\n    LBfield = {has_solenoids}\n{''.join([s.to_ini() for s in self.solenoids])}/"

        return (
            "\n\n".join(
                [
                    run_str,
                    output_str,
                    scan_str,
                    charge_str,
                    cavity_str,
                    solenoid_str,
                ]
            )
            + "\n"
        )


class SimulationDispatchOutput(BaseModel):
    model_config = ConfigDict(extra="forbid")

    sim_id: str
    dispatch_response: DispatchResponse


class SimulationMetaData(BaseModel):
    status: DispatchStatus = Field(description="Current status of the simulation.")
    finished_date: datetime | None = Field(
        default=None,
        description="Time and date when ASTRA simulation finished as ISO 8601.",
    )
    execution_time: float | None = Field(
        default=None, description="Duration of the ASTRA simulation."
    )


class SimulationData(BaseModel):
    model_config = ConfigDict(extra="forbid")

    particles: list[Particles] = Field()
    final_particle_counts: dict[str, int] = Field(
        description="Number of particles - active, inactive, total."
    )
    emittance_x: XYEmittanceTable | None = Field(default=None)
    emittance_y: XYEmittanceTable | None = Field(default=None)
    emittance_z: ZEmittanceTable | None = Field(default=None)


class SimulationAllData(BaseModel):
    model_config = ConfigDict(extra="forbid")

    web_input: SimulationInput = Field()
    data: SimulationData = Field(
        description="Simulation data, if the simulation has finished successfully.",
    )
    run_input: str | None = Field(default=None)
    run_output: str | None = Field(default=None)
    meta: SimulationMetaData | None = Field(default=None)
