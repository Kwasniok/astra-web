import os
import glob
from shutil import rmtree
from unittest import case
from astra_web.host_localizer import HostLocalizer
from .schemas.io import (
    GeneratorInput,
    GeneratorCompleteData,
    GeneratorData,
    GeneratorDispatchOutput,
)
from .schemas.particles import Particles
from astra_web.uuid import get_uuid
from astra_web.file import write_json, read_json, write_txt, read_txt
from astra_web.choices import ListCategory


def dispatch_particle_distribution_generation(
    generator_input: GeneratorInput,
    local_localizer: HostLocalizer,
    host_localizer: HostLocalizer,
) -> GeneratorDispatchOutput:
    """Dispatches the generation of a particle distribution based on the provided generator input.
    The generator input is written to disk, and the generation is dispatched to the appropriate host.
    """
    # local
    _write_generator_files(generator_input, local_localizer)
    # 'remote'
    response = host_localizer.dispatch_generation(generator_input)
    return GeneratorDispatchOutput(
        gen_id=generator_input.gen_id,
        dispatch_response=response,
    )


def _write_generator_files(
    generator_input: GeneratorInput, localizer: HostLocalizer
) -> None:
    path = localizer.generator_path(generator_input.gen_id)
    os.makedirs(path, exist_ok=True)
    write_json(
        generator_input, localizer.generator_path(generator_input.gen_id, "input.json")
    )
    write_txt(
        generator_input.to_ini(),
        localizer.generator_path(generator_input.gen_id, "generator.in"),
    )


def load_generator_data(
    gen_id: str, localizer: HostLocalizer
) -> GeneratorCompleteData | None:
    """
    Loads the generator output for a given generator ID.
    Returns None if the particle distribution does not exist.
    """
    if not os.path.exists(localizer.generator_path(gen_id, "distribution.ini")):
        return None

    web_input = read_json(
        GeneratorInput, localizer.generator_path(gen_id, "input.json")
    )

    particles = read_particle_file(gen_id, localizer)

    data = GeneratorData(particles=particles)

    generator_input = read_txt(localizer.generator_path(gen_id, "generator.in"))
    generator_output = read_txt(localizer.generator_path(gen_id, "generator.out"))

    return GeneratorCompleteData(
        web_input=web_input,
        data=data,
        generator_input=generator_input,
        generator_output=generator_output,
    )


def read_particle_file(gen_id: str, localizer: HostLocalizer) -> Particles:
    """
    Reads the particle file generated by the ASTRA generator."""
    path = localizer.generator_path(gen_id, "distribution.ini")

    return Particles.read_from_csv(path)


def list_generator_ids(
    localizer: HostLocalizer,
    filter: ListCategory,
) -> list[str]:
    """
    Lists IDs of particle distribution generations.
    """

    all = lambda: set(
        map(
            lambda p: os.path.split(p)[-1],
            glob.glob(localizer.generator_path("*")),
        )
    )
    finished = lambda: set(
        map(
            lambda p: os.path.split(os.path.split(p)[-2])[-1],
            glob.glob(localizer.generator_path("*", "distribution.ini")),
        )
    )

    match filter:
        case ListCategory.ALL:
            return sorted(all())
        case ListCategory.FINISHED:
            return sorted(finished())
        case ListCategory.PENDING:
            return sorted(all() - finished())


def delete_particle_distribution(
    gen_id: str, localizer: HostLocalizer
) -> list[str] | None:
    """
    Deletes the particle distribution file for a given generator ID.

    Returns a list of symlinks that are referencing the distribution file and blocking the deletion.
    """
    path = localizer.generator_path(gen_id)
    if not os.path.exists(path):
        return

    # delete only when nothing is referencing it
    links = _find_symlinks(
        localizer.generator_path(gen_id, "distribution.ini"),
        localizer.data_path(),
        link_name="distribution.ini",
    )
    if len(links) > 0:
        return links

    # now its safe to remove
    rmtree(path)
    return


def _find_symlinks(target_file, root_dir, link_name="distribution.ini"):
    target_realpath = os.path.realpath(target_file)
    matching_symlinks = []

    for dirpath, _, filenames in os.walk(root_dir):
        if link_name in filenames:
            full_path = os.path.join(dirpath, link_name)
            if os.path.islink(full_path):
                try:
                    link_target = os.path.realpath(full_path)
                    if link_target == target_realpath:
                        matching_symlinks.append(full_path)
                except OSError:
                    continue  # skip broken/inaccessible symlinks

    return matching_symlinks


def write_particle_distribution(particles: Particles, localizer: HostLocalizer) -> str:
    """
    Writes the particle distribution to disk.
    """
    gen_id = get_uuid()
    path = localizer.generator_path(gen_id, "distribution.ini")
    if os.path.exists(path):
        os.remove(path)
    os.makedirs(os.path.dirname(path), exist_ok=True)
    particles.write_to_csv(path)
    return gen_id
