import os
import glob
from astra_web.host_localizer import HostLocalizer
from .schemas.io import GeneratorInput
from .schemas.particles import Particles
from .util import _read_particle_file


def write_generator_files(
    generator_input: GeneratorInput, localizer: HostLocalizer
) -> str:
    """Writes all required files for the generator to disk."""
    path = localizer.generator_path(generator_input.gen_id, "generator.in")
    os.makedirs(os.path.dirname(path), exist_ok=True)
    ini_content = generator_input.to_ini()
    with open(path, "w") as input_file:
        input_file.write(ini_content)

    return ini_content


def read_particle_file(gen_id: str, localizer: HostLocalizer) -> Particles:
    """
    Reads the particle file generated by the ASTRA generator."""
    filepath = localizer.generator_path(gen_id, "distribution.ini")

    return _read_particle_file(filepath)


def read_generator_file(gen_id: str, file_name: str, localizer: HostLocalizer) -> str:
    """
    Reads a generator file with the specified extension - e.g. .IN or .INI.
    """
    filepath = localizer.generator_path(gen_id, file_name)
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"Generator file '{filepath}' not found.")

    with open(filepath, "r") as file:
        return file.read()


def list_finished_generator_ids(localizer: HostLocalizer) -> list[str]:
    """
    Lists all ID of completed particle distribution generations.
    """
    files = glob.glob(localizer.generator_path("*", "distribution.ini"))
    files = list(map(lambda p: p.split("/")[-2], files))

    return sorted(files)
