import glob
import os
from shutil import rmtree

from astra_web._aux import filter_has_prefix
from astra_web.file import find_symlinks, read_json, read_txt, write_json, write_txt
from astra_web.host_localizer import HostLocalizer
from astra_web.status import DispatchStatus
from astra_web.uuid import get_uuid

from .schemas.io import (
    GeneratorData,
    GeneratorDispatchOutput,
    GeneratorInput,
    GeneratorOutput,
)
from .schemas.particles import Particles


async def dispatch_particle_distribution_generation(
    generator_input: GeneratorInput,
    local_localizer: HostLocalizer,
    host_localizer: HostLocalizer,
    timeout: int,
) -> GeneratorDispatchOutput:
    """Dispatches the generation of a particle distribution based on the provided generator input.
    The generator input is written to disk, and the generation is dispatched to the appropriate host.
    """
    # local
    _write_generator_files(generator_input, local_localizer)
    # 'remote'
    response = await host_localizer.dispatch_generation(
        generator_input, timeout=timeout
    )
    return GeneratorDispatchOutput(
        gen_id=generator_input.id,
        dispatch_response=response,
    )


def _write_generator_files(
    generator_input: GeneratorInput, localizer: HostLocalizer
) -> None:
    path = localizer.generator_path(generator_input.id)
    os.makedirs(path, exist_ok=True)
    write_json(
        generator_input, localizer.generator_path(generator_input.id, "input.json")
    )
    write_txt(
        generator_input.to_ini(),
        localizer.generator_path(generator_input.id, "generator.in"),
    )


def load_generator_data(
    gen_id: str,
    localizer: HostLocalizer,
    include: list[str] | None = None,
) -> GeneratorData | None:
    """
    Loads the generator output for a given generator ID.
    Returns None if the particle distribution does not exist.


    Parameters:
        include: Optional list of feature paths to include. All others are excluded. If `None`, all features are included.
            Example: `["input.run", "output"]`

    """
    if not os.path.exists(localizer.generator_path(gen_id, "distribution.ini")):
        return None

    # input
    if filter_has_prefix(include, "input"):
        input = read_json(
            GeneratorInput, localizer.generator_path(gen_id, "input.json")
        )
    else:
        input = None

    # output
    if filter_has_prefix(include, "output"):
        particles = read_particle_file(gen_id, localizer)
        output = GeneratorOutput(particles=particles)
    else:
        output = None

    # generator_input
    if filter_has_prefix(include, "astra_input"):
        astra_input = read_txt(localizer.generator_path(gen_id, "generator.in"))
    else:
        astra_input = None

    # generator_output
    if filter_has_prefix(include, "astra_output"):
        astra_output = read_txt(localizer.generator_path(gen_id, "generator.out"))
    else:
        astra_output = None

    return GeneratorData(
        input=input,
        output=output,
        astra_input=astra_input,
        astra_output=astra_output,
    )


def read_particle_file(gen_id: str, localizer: HostLocalizer) -> Particles:
    """
    Reads the particle file generated by the ASTRA generator."""
    path = localizer.generator_path(gen_id, "distribution.ini")

    return Particles.read_from_csv(path)


def list_generator_ids(
    localizer: HostLocalizer,
    state: DispatchStatus,
) -> list[str]:
    """
    Lists IDs of particle distribution generations.
    """

    ids_all = map(
        lambda p: os.path.split(p)[-1],
        glob.glob(localizer.generator_path("*")),
    )

    if state == DispatchStatus.ANY:
        return sorted(ids_all)
    else:
        return sorted(
            id for id in ids_all if get_generation_status(id, localizer) == state
        )


def delete_particle_distribution(
    gen_id: str, localizer: HostLocalizer
) -> list[str] | None:
    """
    Deletes the particle distribution file for a given generator ID.

    Returns a list of symlinks that are referencing the distribution file and blocking the deletion.
    """
    path = localizer.generator_path(gen_id)
    if not os.path.exists(path):
        return

    # delete only when nothing is referencing it
    links = find_symlinks(
        localizer.generator_path(gen_id, "distribution.ini"),
        localizer.data_path(),
        link_name="distribution.ini",
    )
    if len(links) > 0:
        return links

    # now its safe to remove
    rmtree(path)
    return


def write_particle_distribution(particles: Particles, localizer: HostLocalizer) -> str:
    """
    Writes the particle distribution to disk.
    """
    gen_id = get_uuid()
    path = localizer.generator_path(gen_id, "distribution.ini")
    if os.path.exists(path):
        os.remove(path)
    os.makedirs(os.path.dirname(path), exist_ok=True)
    particles.write_to_csv(path)
    return gen_id


def get_generation_status(ge_id: str, localizer: HostLocalizer) -> DispatchStatus:
    """
    Returns status of the particle generation.
    """
    path = localizer.generator_path(ge_id, "generator.err")
    if os.path.isfile(path) and os.path.getsize(path) > 0:
        return DispatchStatus.FAILED
    path = localizer.generator_path(ge_id, "generator.out")
    if os.path.isfile(path):
        if "phase-space distribution saved to file" in read_txt(path):
            return DispatchStatus.FINISHED
    return DispatchStatus.PENDING
